{"version":3,"sources":["components/Chart/LineGraph.js","components/Cards/Card.js","components/Cards/Cards.js","axios.js","components/Title/Title.js","components/HomePage.js","App.js","serviceWorker.js","index.js","components/Chart/LineGraph.module.css","components/HomePage.module.css","components/Cards/Cards.module.css"],"names":["LineGraph","props","data","labels","xAxis","map","label","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","className","styles","Card","cardColor","cardTitle","cardValue","card","neumorphism","style","color","value","displayType","thousandSeparator","Cards","totalConfirmed","totalRecovered","totalDeaths","country","totalActive","axiosInstance","axios","create","baseURL","Title","background","HomePage","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","loading","setLoading","covidData","setCovidData","days","setDays","setCountry","covidCountArr","setCovidCountArr","setLabel","useEffect","get","then","res","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","console","log","catch","err","formatDate","date","d","Date","_year","getFullYear","_month","getMonth","slice","_date","getDate","daysChangeHandler","event","preventDefault","target","to","from","setDate","getCoronaDataByDateRange","countrySlug","yAxisCovidCasesCount","Cases","xAxisLabel","covidCountryData","Countries","find","Slug","Country","onChange","hidden","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"4MAsCeA,MAlCf,SAAmBC,GACjB,IAAMC,EAAO,CACXC,OAAQF,EAAMG,MAAMC,KAAI,SAACC,GAAD,OAAWA,EAAMC,OAAO,EAAG,OACnDC,SAAU,CACR,CACEF,MAAO,cACPG,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBvB,KAAMD,EAAMyB,SAIlB,OACE,yBAAKC,UAAWC,IAAO5B,WACrB,kBAAC,OAAD,CAAME,KAAMA,M,wBCNH2B,MAnBf,SAAc5B,GAAQ,IACZ6B,EAAoC7B,EAApC6B,UAAWC,EAAyB9B,EAAzB8B,UAAWC,EAAc/B,EAAd+B,UAC9B,OACE,yBAAKL,UAAS,UAAKC,IAAOK,KAAZ,YAAoBL,IAAOM,cACvC,0BAAMC,MAAO,CAAEC,MAAM,GAAD,OAAKN,KAAgBC,GACzC,6BACA,8BAEI,kBAAC,IAAD,CACEM,MAAOL,EACPM,YAAY,OACZC,mBAAmB,OCShBC,MAxBf,SAAevC,GAAQ,IACbwC,EAAyDxC,EAAzDwC,eAAgBC,EAAyCzC,EAAzCyC,eAAgBC,EAAyB1C,EAAzB0C,YAAaC,EAAY3C,EAAZ2C,QAC/CC,EAAcJ,GAAkBC,EAAiBC,GACvD,OACE,6BACE,yBAAKhB,UAAWC,IAAOY,OACrB,kBAAC,EAAD,CACEV,UAAU,MACVC,UAAU,YACVC,UAAWS,IAEb,kBAAC,EAAD,CAAMX,UAAU,OAAOC,UAAU,SAASC,UAAWa,IACrD,kBAAC,EAAD,CACEf,UAAU,QACVC,UAAU,YACVC,UAAWU,IAEb,kBAAC,EAAD,CAAMZ,UAAU,OAAOC,UAAU,SAASC,UAAWW,KAEvD,4BAAiB,KAAZC,EAAiB,SAAWA,EAAjC,a,QCjBSE,E,OAJOC,EAAMC,OAAO,CACjCC,QAAQ,+B,iBCYKC,MAZf,WACE,OACE,6BACE,wBAAIf,MAAOP,KAAX,SAEE,0BAAMO,MAAO,CAAEC,MAAO,OAAQe,WAAY,SAA1C,OAFF,oB,iBC0HSC,MAzHf,WAAqB,IAAD,EAC0BC,mBAAS,GADnC,mBACXZ,EADW,KACKa,EADL,OAE0BD,mBAAS,GAFnC,mBAEXX,EAFW,KAEKa,EAFL,OAGoBF,mBAAS,GAH7B,mBAGXV,EAHW,KAGEa,EAHF,OAIYH,oBAAS,GAJrB,mBAIXI,EAJW,KAIFC,EAJE,OAKgBL,mBAAS,IALzB,mBAKXM,EALW,KAKAC,EALA,OAMMP,mBAAS,GANf,mBAMXQ,EANW,KAMLC,EANK,OAOYT,mBAAS,IAPrB,mBAOXT,EAPW,KAOFmB,EAPE,OAQwBV,mBAAS,IARjC,mBAQXW,EARW,KAQIC,EARJ,OASQZ,mBAAS,IATjB,mBASX/C,EATW,KASJ4D,EATI,KAWlBC,qBAAU,WACRT,GAAW,GACXX,EACGqB,IADH,YAEGC,MAAK,SAACC,GACLZ,GAAW,GACQ,MAAfY,EAAIC,SACNjB,EAAkBgB,EAAIpE,KAAKsE,OAAOC,gBAClClB,EAAkBe,EAAIpE,KAAKsE,OAAOE,gBAClClB,EAAec,EAAIpE,KAAKsE,OAAOG,aAC/Bf,EAAaU,EAAIpE,OAEnB0E,QAAQC,IAAIP,MAEbQ,OAAM,SAACC,GACNH,QAAQC,IAAIE,QAEf,IAEH,IAAMC,EAAa,SAACC,GAClB,IAAMC,EAAI,IAAIC,KAAKF,GACbG,EAAQF,EAAEG,cACVC,EAAS,WAAIJ,EAAEK,WAAa,GAAIC,OAAO,GACvCC,EAAQP,EAAEQ,UAChB,MAAM,GAAN,OAAUN,EAAV,YAAmBE,EAAnB,YAA6BG,IAWzBE,EAAoB,SAACC,GACzBA,EAAMC,iBACN/B,EAAQ8B,EAAME,OAAOzD,OACrB,IAAM6C,EAAI,IAAIC,KACRY,EAAKf,EAAWE,GAChBc,EAAOhB,EAAWE,EAAEe,QAAQf,EAAEQ,UAAYE,EAAME,OAAOzD,QAC7D6D,EAAyBtD,EAASoD,EAAMD,IAGpCG,EAA2B,SAACC,EAAaH,EAAMD,GACnDhD,EACGqB,IADH,mBAEgB+B,EAFhB,kCAEqDH,EAFrD,yBAE0ED,EAF1E,eAIG1B,MAAK,SAACC,GACLM,QAAQC,IAAIP,GAEZ,IAAM8B,EAAuB9B,EAAIpE,KAAKG,KAAI,SAAC6E,GAAD,OAAOA,EAAEmB,SAC7CC,EAAahC,EAAIpE,KAAKG,KAAI,SAAC6E,GAAD,OAAOA,EAAEC,QACzClB,EAAiBmC,GACjBlC,EAASoC,GAET,IAAMC,EAAmB5C,EAAU6C,UAAUC,MAC3C,SAAC7D,GAAD,OAAaA,EAAQ8D,OAASP,KAEhC7C,EAAkBiD,EAAiB9B,gBACnClB,EAAkBgD,EAAiB7B,gBACnClB,EAAe+C,EAAiB5B,aAChCZ,EAAWwC,EAAiBI,YAE7B7B,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAIlB,OAAItB,EACK,+DAGP,6BACE,kBAAC,EAAD,MACA,4BAAQtB,MAAOP,IAAQS,MAAOO,EAASgE,SAjDd,SAAChB,GAC5B7B,EAAW6B,EAAME,OAAOzD,OACxB,IAAM6C,EAAI,IAAIC,KACRY,EAAKf,EAAWE,GAChBc,EAAOhB,EAAWE,EAAEe,QAAQf,EAAEQ,UAAY7B,IAChDqC,EAAyBN,EAAME,OAAOzD,MAAO2D,EAAMD,KA6C/C,4BAAQ1D,MAAM,GAAGwE,QAAM,GAAvB,kBAGA,4BAAQxE,MAAM,IAAd,UACCsB,EAAU6C,WACT7C,EAAU6C,UAAUnG,KAAI,SAACuC,GAAD,OACtB,4BAAQkE,IAAKlE,EAAQ8D,KAAMrE,MAAOO,EAAQ8D,MACvC9D,EAAQ+D,aAIjB,kBAAC,EAAD,CACElE,eAAgBA,EAChBC,eAAgBA,EAChBC,YAAaA,EACbC,QAASA,IAEX,kBAAC,EAAD,CAAWlB,MAAOsC,EAAe5D,MAAOE,IACxC,6BACE,4BAAQ+B,MAAM,IAAI0E,QAASpB,GAA3B,YAGA,4BAAQtD,MAAM,KAAK0E,QAASpB,GAA5B,cAGA,4BAAQtD,MAAM,KAAK0E,QAASpB,GAA5B,oBC5GOqB,MARf,WACE,OACE,yBAAKrF,UAAU,OACb,kBAAC,EAAD,QCKcsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAkD,GACLpD,QAAQoD,MAAMA,EAAMC,a,mBExI5BC,EAAOC,QAAU,CAAC,UAAY,+B,wCCA9BD,EAAOC,QAAU,CAAC,eAAe,+BAA+B,GAAK,uB,iGCArED,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,KAAO,oBAAoB,OAAS,yB","file":"static/js/main.98a05c6e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport styles from \"./LineGraph.module.css\";\n\nfunction LineGraph(props) {\n  const data = {\n    labels: props.xAxis.map((label) => label.substr(0, 10)),\n    datasets: [\n      {\n        label: \"Corona Data\",\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: props.yAxis,\n      },\n    ],\n  };\n  return (\n    <div className={styles.LineGraph}>\n      <Line data={data} />\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport styles from \"./Cards.module.css\";\nimport NumberFormat from \"react-number-format\";\n\n// function Card(props) {\n//   return <div>{props.children}</div>;\n// }\n\nfunction Card(props) {\n  const { cardColor, cardTitle, cardValue } = props;\n  return (\n    <div className={`${styles.card} ${styles.neumorphism}`}>\n      <span style={{ color: `${cardColor}` }}>{cardTitle}</span>\n      <br />\n      <span>\n        {\n          <NumberFormat\n            value={cardValue}\n            displayType=\"text\"\n            thousandSeparator={true}\n          />\n        }\n      </span>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport styles from \"./Cards.module.css\";\n\nfunction Cards(props) {\n  const { totalConfirmed, totalRecovered, totalDeaths, country } = props;\n  const totalActive = totalConfirmed - (totalRecovered + totalDeaths);\n  return (\n    <div>\n      <div className={styles.Cards}>\n        <Card\n          cardColor=\"red\"\n          cardTitle=\"Confirmed\"\n          cardValue={totalConfirmed}\n        />\n        <Card cardColor=\"blue\" cardTitle=\"Active\" cardValue={totalActive} />\n        <Card\n          cardColor=\"green\"\n          cardTitle=\"Recovered\"\n          cardValue={totalRecovered}\n        />\n        <Card cardColor=\"gray\" cardTitle=\"Deaths\" cardValue={totalDeaths} />\n      </div>\n      <h1>{country === \"\" ? \"Global\" : country} Report</h1>\n    </div>\n  );\n}\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n  baseURL: `https://api.covid19api.com`,\n});\n\nexport default axiosInstance;\n","import React from \"react\";\nimport styles from \"./Title.module.css\";\n\nfunction Title() {\n  return (\n    <div>\n      <h1 style={styles}>\n        COVID-\n        <mark style={{ color: \"blue\", background: \"none\" }}>19 </mark>\n        Global Tracker\n      </h1>\n    </div>\n  );\n}\n\nexport default Title;\n","import React, { useEffect, useState } from \"react\";\nimport LineGraph from \"./Chart/LineGraph\";\nimport Cards from \"./Cards/Cards\";\nimport axios from \"../axios\";\nimport Title from \"./Title/Title\";\nimport styles from \"./HomePage.module.css\";\n\nfunction HomePage() {\n  const [totalConfirmed, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDeaths, setTotalDeaths] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [covidData, setCovidData] = useState({});\n  const [days, setDays] = useState(7);\n  const [country, setCountry] = useState(\"\");\n  const [covidCountArr, setCovidCountArr] = useState([]);\n  const [label, setLabel] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get(`/summary`)\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setTotalConfirmed(res.data.Global.TotalConfirmed);\n          setTotalRecovered(res.data.Global.TotalRecovered);\n          setTotalDeaths(res.data.Global.TotalDeaths);\n          setCovidData(res.data);\n        }\n        console.log(res);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    const _year = d.getFullYear();\n    const _month = `0${d.getMonth() + 1}`.slice(-2);\n    const _date = d.getDate();\n    return `${_year}-${_month}-${_date}`;\n  };\n\n  const countryChangeHandler = (event) => {\n    setCountry(event.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - days));\n    getCoronaDataByDateRange(event.target.value, from, to);\n  };\n\n  const daysChangeHandler = (event) => {\n    event.preventDefault();\n    setDays(event.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - event.target.value));\n    getCoronaDataByDateRange(country, from, to);\n  };\n\n  const getCoronaDataByDateRange = (countrySlug, from, to) => {\n    axios\n      .get(\n        `/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`\n      )\n      .then((res) => {\n        console.log(res);\n\n        const yAxisCovidCasesCount = res.data.map((d) => d.Cases);\n        const xAxisLabel = res.data.map((d) => d.Date);\n        setCovidCountArr(yAxisCovidCasesCount);\n        setLabel(xAxisLabel);\n\n        const covidCountryData = covidData.Countries.find(\n          (country) => country.Slug === countrySlug\n        );\n        setTotalConfirmed(covidCountryData.TotalConfirmed);\n        setTotalRecovered(covidCountryData.TotalRecovered);\n        setTotalDeaths(covidCountryData.TotalDeaths);\n        setCountry(covidCountryData.Country);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  if (loading) {\n    return <p>Fetching Data from server.......</p>;\n  }\n  return (\n    <div>\n      <Title />\n      <select style={styles} value={country} onChange={countryChangeHandler}>\n        <option value=\"\" hidden>\n          Select Country\n        </option>\n        <option value=\"\">Global</option>\n        {covidData.Countries &&\n          covidData.Countries.map((country) => (\n            <option key={country.Slug} value={country.Slug}>\n              {country.Country}\n            </option>\n          ))}\n      </select>\n      <Cards\n        totalConfirmed={totalConfirmed}\n        totalRecovered={totalRecovered}\n        totalDeaths={totalDeaths}\n        country={country}\n      />\n      <LineGraph yAxis={covidCountArr} xAxis={label} />\n      <div>\n        <button value=\"7\" onClick={daysChangeHandler}>\n          Lastweek\n        </button>\n        <button value=\"30\" onClick={daysChangeHandler}>\n          Last month\n        </button>\n        <button value=\"90\" onClick={daysChangeHandler}>\n          Last 3 months\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./components/HomePage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LineGraph\":\"LineGraph_LineGraph__1t4od\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"font-awesome\":\"HomePage_font-awesome__28yhF\",\"fa\":\"HomePage_fa__3dUoq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cards\":\"Cards_Cards__2LXaI\",\"neumorphism\":\"Cards_neumorphism__GylQi\",\"card\":\"Cards_card__eGUfZ\",\"active\":\"Cards_active__1mwzX\"};"],"sourceRoot":""}